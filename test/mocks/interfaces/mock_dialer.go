// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/dialer.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	gomock "github.com/golang/mock/gomock"
	interfaces "github.com/schwartzmx/gremtune/interfaces"
	reflect "reflect"
)

// MockDialer is a mock of Dialer interface
type MockDialer struct {
	ctrl     *gomock.Controller
	recorder *MockDialerMockRecorder
}

// MockDialerMockRecorder is the mock recorder for MockDialer
type MockDialerMockRecorder struct {
	mock *MockDialer
}

// NewMockDialer creates a new mock instance
func NewMockDialer(ctrl *gomock.Controller) *MockDialer {
	mock := &MockDialer{ctrl: ctrl}
	mock.recorder = &MockDialerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDialer) EXPECT() *MockDialerMockRecorder {
	return m.recorder
}

// Connect mocks base method
func (m *MockDialer) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect
func (mr *MockDialerMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockDialer)(nil).Connect))
}

// IsConnected mocks base method
func (m *MockDialer) IsConnected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnected indicates an expected call of IsConnected
func (mr *MockDialerMockRecorder) IsConnected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnected", reflect.TypeOf((*MockDialer)(nil).IsConnected))
}

// IsDisposed mocks base method
func (m *MockDialer) IsDisposed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDisposed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDisposed indicates an expected call of IsDisposed
func (mr *MockDialerMockRecorder) IsDisposed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDisposed", reflect.TypeOf((*MockDialer)(nil).IsDisposed))
}

// Write mocks base method
func (m *MockDialer) Write(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockDialerMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockDialer)(nil).Write), arg0)
}

// Read mocks base method
func (m *MockDialer) Read() (int, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Read indicates an expected call of Read
func (mr *MockDialerMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockDialer)(nil).Read))
}

// Close mocks base method
func (m *MockDialer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockDialerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDialer)(nil).Close))
}

// GetAuth mocks base method
func (m *MockDialer) GetAuth() *interfaces.Auth {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuth")
	ret0, _ := ret[0].(*interfaces.Auth)
	return ret0
}

// GetAuth indicates an expected call of GetAuth
func (mr *MockDialerMockRecorder) GetAuth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuth", reflect.TypeOf((*MockDialer)(nil).GetAuth))
}

// Ping mocks base method
func (m *MockDialer) Ping(errs chan error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Ping", errs)
}

// Ping indicates an expected call of Ping
func (mr *MockDialerMockRecorder) Ping(errs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDialer)(nil).Ping), errs)
}

// GetQuitChannel mocks base method
func (m *MockDialer) GetQuitChannel() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuitChannel")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// GetQuitChannel indicates an expected call of GetQuitChannel
func (mr *MockDialerMockRecorder) GetQuitChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuitChannel", reflect.TypeOf((*MockDialer)(nil).GetQuitChannel))
}
