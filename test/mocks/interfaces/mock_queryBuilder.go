// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/queryBuilder.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	gomock "github.com/golang/mock/gomock"
	interfaces "github.com/supplyon/gremcos/interfaces"
	reflect "reflect"
)

// MockQueryBuilder is a mock of QueryBuilder interface
type MockQueryBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockQueryBuilderMockRecorder
}

// MockQueryBuilderMockRecorder is the mock recorder for MockQueryBuilder
type MockQueryBuilderMockRecorder struct {
	mock *MockQueryBuilder
}

// NewMockQueryBuilder creates a new mock instance
func NewMockQueryBuilder(ctrl *gomock.Controller) *MockQueryBuilder {
	mock := &MockQueryBuilder{ctrl: ctrl}
	mock.recorder = &MockQueryBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockQueryBuilder) EXPECT() *MockQueryBuilderMockRecorder {
	return m.recorder
}

// String mocks base method
func (m *MockQueryBuilder) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockQueryBuilderMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockQueryBuilder)(nil).String))
}

// MockGraph is a mock of Graph interface
type MockGraph struct {
	ctrl     *gomock.Controller
	recorder *MockGraphMockRecorder
}

// MockGraphMockRecorder is the mock recorder for MockGraph
type MockGraphMockRecorder struct {
	mock *MockGraph
}

// NewMockGraph creates a new mock instance
func NewMockGraph(ctrl *gomock.Controller) *MockGraph {
	mock := &MockGraph{ctrl: ctrl}
	mock.recorder = &MockGraphMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGraph) EXPECT() *MockGraphMockRecorder {
	return m.recorder
}

// String mocks base method
func (m *MockGraph) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockGraphMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockGraph)(nil).String))
}

// V mocks base method
func (m *MockGraph) V() interfaces.Vertex {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "V")
	ret0, _ := ret[0].(interfaces.Vertex)
	return ret0
}

// V indicates an expected call of V
func (mr *MockGraphMockRecorder) V() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "V", reflect.TypeOf((*MockGraph)(nil).V))
}

// VBy mocks base method
func (m *MockGraph) VBy(id int) interfaces.Vertex {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VBy", id)
	ret0, _ := ret[0].(interfaces.Vertex)
	return ret0
}

// VBy indicates an expected call of VBy
func (mr *MockGraphMockRecorder) VBy(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VBy", reflect.TypeOf((*MockGraph)(nil).VBy), id)
}

// AddV mocks base method
func (m *MockGraph) AddV(label string) interfaces.Vertex {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddV", label)
	ret0, _ := ret[0].(interfaces.Vertex)
	return ret0
}

// AddV indicates an expected call of AddV
func (mr *MockGraphMockRecorder) AddV(label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddV", reflect.TypeOf((*MockGraph)(nil).AddV), label)
}

// MockVertex is a mock of Vertex interface
type MockVertex struct {
	ctrl     *gomock.Controller
	recorder *MockVertexMockRecorder
}

// MockVertexMockRecorder is the mock recorder for MockVertex
type MockVertexMockRecorder struct {
	mock *MockVertex
}

// NewMockVertex creates a new mock instance
func NewMockVertex(ctrl *gomock.Controller) *MockVertex {
	mock := &MockVertex{ctrl: ctrl}
	mock.recorder = &MockVertexMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVertex) EXPECT() *MockVertexMockRecorder {
	return m.recorder
}

// String mocks base method
func (m *MockVertex) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockVertexMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockVertex)(nil).String))
}

// HasLabel mocks base method
func (m *MockVertex) HasLabel(vertexLabel string) interfaces.Vertex {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasLabel", vertexLabel)
	ret0, _ := ret[0].(interfaces.Vertex)
	return ret0
}

// HasLabel indicates an expected call of HasLabel
func (mr *MockVertexMockRecorder) HasLabel(vertexLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasLabel", reflect.TypeOf((*MockVertex)(nil).HasLabel), vertexLabel)
}

// Property mocks base method
func (m *MockVertex) Property(key, value string) interfaces.Vertex {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Property", key, value)
	ret0, _ := ret[0].(interfaces.Vertex)
	return ret0
}

// Property indicates an expected call of Property
func (mr *MockVertexMockRecorder) Property(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Property", reflect.TypeOf((*MockVertex)(nil).Property), key, value)
}

// Properties mocks base method
func (m *MockVertex) Properties() interfaces.QueryBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Properties")
	ret0, _ := ret[0].(interfaces.QueryBuilder)
	return ret0
}

// Properties indicates an expected call of Properties
func (mr *MockVertexMockRecorder) Properties() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Properties", reflect.TypeOf((*MockVertex)(nil).Properties))
}

// Has mocks base method
func (m *MockVertex) Has(key, value string) interfaces.Vertex {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", key, value)
	ret0, _ := ret[0].(interfaces.Vertex)
	return ret0
}

// Has indicates an expected call of Has
func (mr *MockVertexMockRecorder) Has(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockVertex)(nil).Has), key, value)
}

// ValuesBy mocks base method
func (m *MockVertex) ValuesBy(label string) interfaces.QueryBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValuesBy", label)
	ret0, _ := ret[0].(interfaces.QueryBuilder)
	return ret0
}

// ValuesBy indicates an expected call of ValuesBy
func (mr *MockVertexMockRecorder) ValuesBy(label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValuesBy", reflect.TypeOf((*MockVertex)(nil).ValuesBy), label)
}

// Values mocks base method
func (m *MockVertex) Values() interfaces.QueryBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Values")
	ret0, _ := ret[0].(interfaces.QueryBuilder)
	return ret0
}

// Values indicates an expected call of Values
func (mr *MockVertexMockRecorder) Values() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Values", reflect.TypeOf((*MockVertex)(nil).Values))
}

// ValueMap mocks base method
func (m *MockVertex) ValueMap() interfaces.QueryBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValueMap")
	ret0, _ := ret[0].(interfaces.QueryBuilder)
	return ret0
}

// ValueMap indicates an expected call of ValueMap
func (mr *MockVertexMockRecorder) ValueMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValueMap", reflect.TypeOf((*MockVertex)(nil).ValueMap))
}

// Add mocks base method
func (m *MockVertex) Add(builder interfaces.QueryBuilder) interfaces.Vertex {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", builder)
	ret0, _ := ret[0].(interfaces.Vertex)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockVertexMockRecorder) Add(builder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockVertex)(nil).Add), builder)
}

// Id mocks base method
func (m *MockVertex) Id() interfaces.QueryBuilder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(interfaces.QueryBuilder)
	return ret0
}

// Id indicates an expected call of Id
func (mr *MockVertexMockRecorder) Id() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockVertex)(nil).Id))
}
