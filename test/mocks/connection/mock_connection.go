// Code generated by MockGen. DO NOT EDIT.
// Source: connection.go

// Package mock_gremtune is a generated GoMock package.
package mock_gremtune

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockWebsocketConnection is a mock of WebsocketConnection interface
type MockWebsocketConnection struct {
	ctrl     *gomock.Controller
	recorder *MockWebsocketConnectionMockRecorder
}

// MockWebsocketConnectionMockRecorder is the mock recorder for MockWebsocketConnection
type MockWebsocketConnectionMockRecorder struct {
	mock *MockWebsocketConnection
}

// NewMockWebsocketConnection creates a new mock instance
func NewMockWebsocketConnection(ctrl *gomock.Controller) *MockWebsocketConnection {
	mock := &MockWebsocketConnection{ctrl: ctrl}
	mock.recorder = &MockWebsocketConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWebsocketConnection) EXPECT() *MockWebsocketConnectionMockRecorder {
	return m.recorder
}

// SetPongHandler mocks base method
func (m *MockWebsocketConnection) SetPongHandler(handler func(string) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPongHandler", handler)
}

// SetPongHandler indicates an expected call of SetPongHandler
func (mr *MockWebsocketConnectionMockRecorder) SetPongHandler(handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPongHandler", reflect.TypeOf((*MockWebsocketConnection)(nil).SetPongHandler), handler)
}

// WriteMessage mocks base method
func (m *MockWebsocketConnection) WriteMessage(messageType int, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMessage", messageType, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessage indicates an expected call of WriteMessage
func (mr *MockWebsocketConnectionMockRecorder) WriteMessage(messageType, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessage", reflect.TypeOf((*MockWebsocketConnection)(nil).WriteMessage), messageType, data)
}

// ReadMessage mocks base method
func (m *MockWebsocketConnection) ReadMessage() (int, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessage")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadMessage indicates an expected call of ReadMessage
func (mr *MockWebsocketConnectionMockRecorder) ReadMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*MockWebsocketConnection)(nil).ReadMessage))
}

// Close mocks base method
func (m *MockWebsocketConnection) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockWebsocketConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWebsocketConnection)(nil).Close))
}

// WriteControl mocks base method
func (m *MockWebsocketConnection) WriteControl(messageType int, data []byte, deadline time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteControl", messageType, data, deadline)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteControl indicates an expected call of WriteControl
func (mr *MockWebsocketConnectionMockRecorder) WriteControl(messageType, data, deadline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteControl", reflect.TypeOf((*MockWebsocketConnection)(nil).WriteControl), messageType, data, deadline)
}
